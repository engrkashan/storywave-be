generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
}

enum CreationType {
  STORY
  VIDEO
  IMAGE
  VOICEOVER
  PODCAST
}

enum Platform {
  INSTAGRAM
  YOUTUBE
  TIKTOK
  SPOTIFY
  LINKEDIN
  X
  FACEBOOK
}

enum MediaType {
  SCRIPT
  AUDIO
  IMAGE
  VIDEO
  SUBTITLE
  PODCAST
  TRANSCRIPT
}

enum InputType {
  URL
  TEXT
  VIDEO
}

model AdminUser {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  fullName   String?
  email      String  @unique
  username   String  @unique
  password   String
  profileURL String?
  role       Role    @default(ADMIN)

  creations    Creation[]
  integrations Integration[]
  workflows    Workflow[]
  assets       Asset[]

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  lastLoginAt DateTime?
}

model Input {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  type      InputType
  source    String
  processed Boolean   @default(false)

  workflow   Workflow @relation(fields: [workflowId], references: [id])
  workflowId String   @db.ObjectId

  createdAt DateTime @default(now())
}

model Task {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  step     String
  status   String  @default("QUEUED")
  log      String?
  metadata Json?

  workflow   Workflow @relation(fields: [workflowId], references: [id])
  workflowId String   @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Story {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  outline   String?
  content   String
  adminId   String     @db.ObjectId
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Workflow  Workflow[]
}

model Video {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  fileURL   String?
  duration  Int?
  subtitles String?
  adminId   String     @db.ObjectId
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Workflow  Workflow[]
}

model Voiceover {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  script   String
  audioURL String?
  voice    String?

  workflow   Workflow @relation(fields: [workflowId], references: [id])
  workflowId String   @unique @db.ObjectId

  adminId   String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Workflow {
  id       String       @id @default(auto()) @map("_id") @db.ObjectId
  title    String
  type     CreationType
  subType  String?
  status   String       @default("PENDING")
  metadata Json?

  admin   AdminUser @relation(fields: [adminId], references: [id])
  adminId String    @db.ObjectId

  inputs    Input[]
  story     Story?     @relation(fields: [storyId], references: [id])
  voiceover Voiceover?
  video     Video?     @relation(fields: [videoId], references: [id])
  podcast   Podcast?
  media     Media[]
  tasks     Task[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  storyId   String?  @db.ObjectId
  videoId   String?  @db.ObjectId
}

model Podcast {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  title    String
  audioURL String?
  duration Int?
  guests   String?
  script   String?
  subType  String?
  episodes Int?
  audience String?

  workflow   Workflow @relation(fields: [workflowId], references: [id])
  workflowId String   @unique @db.ObjectId
  adminId    String   @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Creation {
  id       String       @id @default(auto()) @map("_id") @db.ObjectId
  type     CreationType
  title    String?
  content  String?
  mediaURL String?
  metadata Json?

  admin   AdminUser @relation(fields: [adminId], references: [id])
  adminId String    @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Integration {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  platform    Platform
  accountId   String
  accessToken String

  admin   AdminUser @relation(fields: [adminId], references: [id])
  adminId String    @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Media {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  type     MediaType
  fileUrl  String
  fileType String
  publicId String?

  workflow   Workflow? @relation(fields: [workflowId], references: [id])
  workflowId String?   @db.ObjectId

  uploadedAt DateTime @default(now())
}

model Asset {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  type     String
  url      String?
  metadata Json?

  admin   AdminUser @relation(fields: [adminId], references: [id])
  adminId String    @db.ObjectId

  createdAt DateTime @default(now())
}
