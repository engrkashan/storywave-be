generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
}

enum CreationType {
  STORY
  VIDEO
  IMAGE
  VOICEOVER
}

enum Platform {
  INSTAGRAM
  YOUTUBE
  TIKTOK
  SPOTIFY
  LINKEDIN
  X
  FACEBOOK
}

model AdminUser {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  fullName   String?
  email      String  @unique
  username   String  @unique
  password   String
  profileURL String?
  role       Role    @default(ADMIN)

  creations    Creation[]
  integrations Integration[]
  stories      Story[]
  voiceovers   Voiceover[]

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  lastLoginAt DateTime?
}

model Story {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  title    String
  content  String
  mediaURL String?

  admin   AdminUser @relation(fields: [adminId], references: [id])
  adminId String    @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Creation {
  id       String       @id @default(auto()) @map("_id") @db.ObjectId
  type     CreationType
  title    String?
  content  String?
  mediaURL String?
  metadata Json?

  admin   AdminUser @relation(fields: [adminId], references: [id])
  adminId String    @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Voiceover {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  script   String
  audioURL String?
  voice    String?

  admin   AdminUser @relation(fields: [adminId], references: [id])
  adminId String    @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Integration {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  platform    Platform
  accountId   String
  accessToken String

  admin   AdminUser @relation(fields: [adminId], references: [id])
  adminId String    @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Media {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  fileUrl    String?
  fileType   String
  publicId   String?
  uploadedAt DateTime @default(now())
}
